// Generated by gencpp from file order_msgs/order.msg
// DO NOT EDIT!


#ifndef ORDER_MSGS_MESSAGE_ORDER_H
#define ORDER_MSGS_MESSAGE_ORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace order_msgs
{
template <class ContainerAllocator>
struct order_
{
  typedef order_<ContainerAllocator> Type;

  order_()
    : ROT(0)
    , GELB(0)
    , GRUEN(0)
    , BRAUN(0)  {
    }
  order_(const ContainerAllocator& _alloc)
    : ROT(0)
    , GELB(0)
    , GRUEN(0)
    , BRAUN(0)  {
  (void)_alloc;
    }



   typedef int8_t _ROT_type;
  _ROT_type ROT;

   typedef int8_t _GELB_type;
  _GELB_type GELB;

   typedef int8_t _GRUEN_type;
  _GRUEN_type GRUEN;

   typedef int8_t _BRAUN_type;
  _BRAUN_type BRAUN;





  typedef boost::shared_ptr< ::order_msgs::order_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::order_msgs::order_<ContainerAllocator> const> ConstPtr;

}; // struct order_

typedef ::order_msgs::order_<std::allocator<void> > order;

typedef boost::shared_ptr< ::order_msgs::order > orderPtr;
typedef boost::shared_ptr< ::order_msgs::order const> orderConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::order_msgs::order_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::order_msgs::order_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::order_msgs::order_<ContainerAllocator1> & lhs, const ::order_msgs::order_<ContainerAllocator2> & rhs)
{
  return lhs.ROT == rhs.ROT &&
    lhs.GELB == rhs.GELB &&
    lhs.GRUEN == rhs.GRUEN &&
    lhs.BRAUN == rhs.BRAUN;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::order_msgs::order_<ContainerAllocator1> & lhs, const ::order_msgs::order_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace order_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::order_msgs::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::order_msgs::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::order_msgs::order_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::order_msgs::order_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_msgs::order_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::order_msgs::order_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::order_msgs::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a830aaf8b2699e79b347e1d2613d1c09";
  }

  static const char* value(const ::order_msgs::order_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa830aaf8b2699e79ULL;
  static const uint64_t static_value2 = 0xb347e1d2613d1c09ULL;
};

template<class ContainerAllocator>
struct DataType< ::order_msgs::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "order_msgs/order";
  }

  static const char* value(const ::order_msgs::order_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::order_msgs::order_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 ROT \n"
"int8 GELB\n"
"int8 GRUEN\n"
"int8 BRAUN\n"
;
  }

  static const char* value(const ::order_msgs::order_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::order_msgs::order_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ROT);
      stream.next(m.GELB);
      stream.next(m.GRUEN);
      stream.next(m.BRAUN);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct order_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::order_msgs::order_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::order_msgs::order_<ContainerAllocator>& v)
  {
    s << indent << "ROT: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ROT);
    s << indent << "GELB: ";
    Printer<int8_t>::stream(s, indent + "  ", v.GELB);
    s << indent << "GRUEN: ";
    Printer<int8_t>::stream(s, indent + "  ", v.GRUEN);
    s << indent << "BRAUN: ";
    Printer<int8_t>::stream(s, indent + "  ", v.BRAUN);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ORDER_MSGS_MESSAGE_ORDER_H
